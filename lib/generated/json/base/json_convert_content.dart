// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

import 'package:flutter_block_captcha/generated/json/block_puzzle_captcha_entity_helper.dart';
import 'package:flutter_block_captcha/generated/json/check_block_puzzle_captcha_entity_helper.dart';
// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_block_captcha/model/block_puzzle_captcha_entity.dart';
import 'package:flutter_block_captcha/model/check_block_puzzle_captcha_entity.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case BlockPuzzleCaptchaEntity:
        return blockPuzzleCaptchaEntityFromJson(
            data as BlockPuzzleCaptchaEntity, json) as T;
      case BlockPuzzleCaptcha:
        return blockPuzzleCaptchaFromJson(data as BlockPuzzleCaptcha, json)
            as T;
      case CheckBlockPuzzleCaptchaEntity:
        return checkBlockPuzzleCaptchaEntityFromJson(
            data as CheckBlockPuzzleCaptchaEntity, json) as T;
      case CheckBlockPuzzleCaptcha:
        return checkBlockPuzzleCaptchaFromJson(
            data as CheckBlockPuzzleCaptcha, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case BlockPuzzleCaptchaEntity:
        return blockPuzzleCaptchaEntityToJson(data as BlockPuzzleCaptchaEntity);
      case BlockPuzzleCaptcha:
        return blockPuzzleCaptchaToJson(data as BlockPuzzleCaptcha);
      case CheckBlockPuzzleCaptchaEntity:
        return checkBlockPuzzleCaptchaEntityToJson(
            data as CheckBlockPuzzleCaptchaEntity);
      case CheckBlockPuzzleCaptcha:
        return checkBlockPuzzleCaptchaToJson(data as CheckBlockPuzzleCaptcha);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle<M>(json) {
    String type = M.toString();
    if (type == (BlockPuzzleCaptchaEntity).toString()) {
      return BlockPuzzleCaptchaEntity().fromJson(json);
    } else if (type == (BlockPuzzleCaptcha).toString()) {
      return BlockPuzzleCaptcha().fromJson(json);
    } else if (type == (CheckBlockPuzzleCaptchaEntity).toString()) {
      return CheckBlockPuzzleCaptchaEntity().fromJson(json);
    } else if (type == (CheckBlockPuzzleCaptcha).toString()) {
      return CheckBlockPuzzleCaptcha().fromJson(json);
    }
    return null;
  }

  //list is returned by type
  static M _getListChildType<M>(List data) {
    if (<BlockPuzzleCaptchaEntity>[] is M) {
      return data
          .map<BlockPuzzleCaptchaEntity>(
              (e) => BlockPuzzleCaptchaEntity().fromJson(e))
          .toList() as M;
    } else if (<BlockPuzzleCaptcha>[] is M) {
      return data
          .map<BlockPuzzleCaptcha>((e) => BlockPuzzleCaptcha().fromJson(e))
          .toList() as M;
    } else if (<CheckBlockPuzzleCaptchaEntity>[] is M) {
      return data
          .map<CheckBlockPuzzleCaptchaEntity>(
              (e) => CheckBlockPuzzleCaptchaEntity().fromJson(e))
          .toList() as M;
    } else if (<CheckBlockPuzzleCaptcha>[] is M) {
      return data
          .map<CheckBlockPuzzleCaptcha>(
              (e) => CheckBlockPuzzleCaptcha().fromJson(e))
          .toList() as M;
    }
    throw Exception("not fond");
  }

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}
